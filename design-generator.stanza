#use-added-syntax(jitx)
defpackage design-template :
  import core
  import jitx
  import jitx/commands

; =========================
; Module to run as a design
; ==========================
val board-shape = Rectangle(300.0, 90.0)

pcb-module taste-the-rainbow :
  pin input
  val rows = 10
  val columns = 16
  val spacing = 7.0

  inst led : components/WS2812B/component[rows][columns]
  net (led[0][0].DIN input)
  defn rainbow-pose (row:Int, column:Int) -> Pose:
    val diff = math/sin((2.0 * 3.14159 * to-double(column)) / 15.0) * 5.0
    val rot = 
      if column % 2 == 0 :
        -1.0
      else : 
        1.0
    val fred = 
      if row % 2 == 0 :
        -90.0
      else :
        0.0
    loc(to-double(column) * spacing, diff + to-double(row) * spacing, rot * 90.0 + fred)

  for c in 0 to columns do :
    for r in 0 to rows do :
      place(led[r][c]) at rainbow-pose(r, c) on Top
      if c % 2 == 0 :
        if r > 0 :
          net (led[r - 1][c].DOUT led[r][c].DIN)
      else :
        if r > 0 :
          net (led[r - 1][c].DIN led[r][c].DOUT)
    if c > 0 :
      if c % 2 == 0 :
        net (led[0][c].DIN led[0][c - 1].DOUT)  
      else :
        net (led[rows - 1][c].DIN led[rows - 1][c - 1].DOUT)  


pcb-module my-design :
  inst rainbow : taste-the-rainbow
  inst esp32 : jitx-2048/main
  inst NAYN : NAYN/nyancat
  place(esp32) at loc(-140.0, -69.2) on Top
  place(NAYN) at loc(45.0, 0.0) on Top
  place(rainbow) at loc(-75.0, -25.0) on Top


; ========================================
; Configure the design and view the result
; ========================================
defn run-design (circuit:Instantiable, outline:Shape) :
  set-design-directory("CAD")

  set-main-module(circuit) ; Treat the provided module as a design, and compile it.

  set-board(ocdb/defaults/default-board(ocdb/stackups/jlcpcb-jlc2313, outline))
  set-rules(ocdb/rules/jlcpcb-rules)

  run-checks("checks.txt")
  view-board()
  ; view-schematic()

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`kicad)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; ============
; Run the code
; ============
run-design(my-design, board-shape)