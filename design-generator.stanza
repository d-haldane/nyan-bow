#use-added-syntax(jitx)
defpackage design-template :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components

; =========================
; Module to run as a design
; ==========================
val board-shape = NAYN/outline

pcb-module taste-the-rainbow (rows, columns):
  val spacing = 6.0

  port rgba : rgb-led[rows][columns]

  inst led : database-part(["manufacturer" => "Foshan NationStar Optoelectronics", "mpn" => "NH-Z1921RGBA-SF"])[rows][columns]
  ; net (led[0][0].DIN input)
  defn rainbow-pose (row:Int, column:Int) -> Pose:
    val diff = math/sin((-5.0 * 3.14159 * to-double(column)) / 15.0) * 5.0
    val rot = 
      if column % 2 == 0 :
        -1.0
      else : 
        1.0
    val fred = 
      if row % 2 == 0 :
        -90.0
      else :
        0.0
    loc(to-double(column) * spacing, diff + to-double(row) * spacing, rot * 90.0 + fred)

  for c in 0 to columns do :
    for r in 0 to rows do :
      net (led[r][c].R rgba[r][c].r)
      net (led[r][c].G rgba[r][c].g)
      net (led[r][c].B rgba[r][c].b)
      net (led[r][c].p[1] rgba[r][c].a)
      place(led[r][c]) at rainbow-pose(r, c) on Top
    ;   if c % 2 == 0 :
    ;     if r > 0 :
    ;       ; net (led[r - 1][c].DOUT led[r][c].DIN)
    ;   else :
    ;     if r > 0 :
    ;       ; net (led[r - 1][c].DIN led[r][c].DOUT)
    ; if c > 0 :
    ;   if c % 2 == 0 :
    ;     ; net (led[0][c].DIN led[0][c - 1].DOUT)  
    ;   else :
    ;     ; net (led[rows - 1][c].DIN led[rows - 1][c - 1].DOUT)  

pcb-module my-design :
  inst NAYN : NAYN/nyancat
  place(NAYN) at loc(0.0, 0.0) on Top
  
  val rows = 10
  val columns = 8
  inst rainbow : taste-the-rainbow(rows, columns)
  place(rainbow) at loc(-60.0, -27.0) on Top


; ========================================
; Configure the design and view the result
; ========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  ; set-paper(ANSI-A5)
  set-current-design("hackathon-2022")
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)
  var main-module = circuit

  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  set-use-layout-groups()
  set-paper(ANSI-A)
  if run-checks? :
    run-checks("checks.txt")
    view-design-explorer()
    export-design()
  else:  
    view-board()
    view-schematic()
    view-design-explorer()

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`kicad)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; ============
; Run the code
; ============
run-design(my-design, false)